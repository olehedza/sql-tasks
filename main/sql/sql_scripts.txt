-- Task #1.1
-- Write a SQL statement that selects the highest grade for each of the cities of the customers.
SELECT city,
       MAX(grade) AS highest_grade
FROM customer
GROUP BY city;

-- Task #2.1
-- Write a SQL statement to find the highest purchase amount ordered by the each customer
-- on a particular date with their ID, order date and highest purchase amount.
SELECT customer_id,
       MAX(purch_amt) AS highest_purch_amt
FROM orders
GROUP BY customer_id
ORDER BY customer_id,
         highest_purch_amt;

-- Task #2.2
-- Write a SQL statement to find the highest purchase amount with their ID and order date,
-- for those customers who have a higher purchase amount in a day is within the range 2000 and 6000.
SELECT customer_id,
       ord_date,
       MAX(purch_amt) AS highest_purch_amt
FROM orders
GROUP BY customer_id,
         ord_date
HAVING MAX(purch_amt)
    BETWEEN 2000 AND 6000

-- Task #3.1
-- Write a SQL statement to find the list of customers who appointed
-- a salesman for their jobs who gets a commission from the company is more than 12%.
SELECT cust_name
FROM customer c
INNER JOIN salesman s
    ON c.salesman_id = s.salesman_id
WHERE s.commission > 0.12;

-- Task #3.2
-- Write a SQL statement to make a list in ascending order for the
-- customer who works either through a salesman or by own.
SELECT cust_name
FROM customer c
LEFT JOIN salesman s
    ON c.salesman_id = s.salesman_id
ORDER BY customer_id

-- Task #3.3
-- Write a SQL statement to make a list in ascending order for the customer
-- who holds a grade less than 300 and works either through a salesman or by own.
SELECT cust_name
FROM customer c
LEFT JOIN salesman s
    ON c.salesman_id = s.salesman_id
WHERE c.grade < 300
ORDER BY customer_id

-- Task #4.1
-- Write a query in SQL to find the names of departments where more
-- than two employees are working.
SELECT emp_dep.dpt_name
FROM emp_details emp_det
INNER JOIN emp_department emp_dep
    ON emp_det.emp_dept = emp_dep.dpt_code
GROUP BY emp_dep.dpt_name
HAVING COUNT(*) > 2;
